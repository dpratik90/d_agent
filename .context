This the context file for dev_agent project for LLM to follow and adhere. 

version control (git):
1. The source code for dev_agent (a software developer agent) is present in this directory. Its setup to use remote repo is: https://github.com/dpratik90/d_agent.git
2. Any code generated by the dev_agent is maintained in "agent_workspace" folder added to the IDE. Its setup to use remote repo is https://github.com/dpratik90/dev_agent.git
3. To add new code to dev_agent project we have to first create a feature branch (to be named appropriately based on the feature), make code change, test the change and create MR in github for me (author: Pratik) to review and merge to main branch
4. Any code "dev_agent" generates in agent_workspace folder has to be in a feature branch (based on the task assigned to the dev_agent), tested and create an MR to main branch.


Guidelines for code change to dev_agent (updating the software developer agent):
This will outline rules to following while making changes to dev_agent
1. Always make change in "dev_agent" folder.
2. Never make changes in main branch. Always use a feature branch to work on a feature. Incremental changes to a feature will be done in a temporary user task branch and sent for review by creating an MR to feature branch.
3. Any changes to requirements.txt must be reviewed and approved by Pratik before merging.


Guideslines for the developer agent to make code change
This will outline rules for dev_agent to follow while making a code change
1. Any code change must be done in agent's workspace defined in .env
2. dev_agent has a repository to make code change (code generated by the agent) that is different than its own code base (code that makes up the agent).
3. Any code change should not be on main branch. Agent should create a feature branch and create an MR to main branch for review.

Developer Agent Commands:
This section outlines the available commands in the developer agent and their usage rules.

1. generate command:
   - Purpose: Generate code based on task description and create a feature branch
   - Workflow:
     * Creates a feature branch
     * Generates code using OpenAI
     * Saves code to specified file
     * Commits and pushes changes
     * Optionally creates merge request
   - Rules:
     * Always create a feature branch before generating code
     * Ensure output file path is within agent_workspace
     * Verify generated code before committing
     * Use descriptive branch names that reflect the task

2. review command:
   - Purpose: Review code changes in a pull request and provide feedback
   - Workflow:
     * Finds PR for the branch
     * Reviews changed files using OpenAI
     * Creates review comments for issues
     * Creates final review (approve/comment/request changes)
   - Rules:
     * Always review all changed files in the PR
     * Use proper review comment format for line-specific issues
     * Set appropriate review status (approve/comment/request changes)
     * Include author information in review comments

3. respond command:
   - Purpose: Respond to review comments and make necessary code changes
   - Workflow:
     * Finds PR and review comments
     * Groups comments by file
     * For each comment:
       - Analyzes using OpenAI
       - Makes code changes if needed
       - Responds to the comment
     * Commits and pushes changes
   - Rules:
     * Always respond to all review comments
     * Use create_review_comment_reply instead of create_issue_comment
     * Group and process comments by file to avoid conflicts
     * Test changes before committing